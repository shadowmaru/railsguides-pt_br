== Sessão ==

Sua aplicação tem uma sessão para cada usuário onde você pode armazenar pequenas quantidades de dados que serão persistidos durante cada requisição. A sessão só fica disponível para o controller e a view e pode utilizar um de diferentes mecanismos de armazenamento:

 * CookieStore - Armazena tudo no cliente.
 * DRbStore - Armazena os dados dem um servidor DRb.
 * MemCacheStore - Armazena os dados em um memcache.
 * ActiveRecordStore - Armazena os dados em um banco de dados utilizando o Active Record.

Todos os métodos utilizam um cookie - isto é obrigatório e o Rails não permite que qualquer parte da sessão seja passada de outra forma (por exemplo, você não pode utilizar parâmetros de requisição para passar o ID de uma session) por questão de segurança (é mais fácil interceptar e modificar uma sessão quando o ID faz parte da URL).

A maioria utiliza um cookie para armazenar o ID da sessão, que é então utilizado para procurar os dados da sessão no servidor. O método padrão e recomendado, o CookieStore, não armazena dados da sessão no servidor, mas sim no próprio cookie. Os dados são assinados criptograficamente para torná-los a prova de alterações, mas eles não são criptografados, então qualquer um com acesso ao cookie pode ler seu conteúdo, mas não editá-lo (o Rails não irá aceitá-lo se ele tiver sido editado). Ele só pode armazenar cerca de 4kB de dados - bem menos do que os outros métodos - mas isto geralmente é o suficiente. O armazenamento de grandes quantidades de dados não é recomendado, não importa qual o método de armazenamento de sessão a sua aplicação utilize. Você deve evitar principalmente armazenar objetos complexos (qualquer coisa diferente de objetos Ruby básicos, sendo o exemplo mais comum uma instância de um model) na sessão, já que o servidor pode não conseguir recuperá-los entre requisições, o que resultará em um erro. O armazenamento CookieStore tem a vantagem de não requerir qualquer configuração antes de ser utilizado - o Rails irá gerar uma "chave secreta" que será utilizada para assinar o cookie quando você criar a aplicação.

Leia mais sobre armazenamento de sessão no link:../seguranca.html[Guia de Seguranca].

Se você precisar de um mecanismo de armazenamento de sessão diferente, você pode alterá-lo no arquivo `config/environment.rb`:

[source, ruby]
------------------------------------------
# Escolha um dentre [:active_record_store, :drb_store, :mem_cache_store, :cookie_store]
config.action_controller.session_store = :active_record_store
------------------------------------------

=== Desabilitando a Sessão ===

Algumas vezes você pode não precisar de uma sessão. Neste caso, você pode desligá-la para evitar desperdícios de recursos. Para fazê-lo, utilize o método de classe `session` em seu controller:

[source, ruby]
------------------------------------------
class ApplicationController < ActionController::Base
  session :off
end
------------------------------------------

Você também pode desligar a sessão em um controller específico:

[source, ruby]
------------------------------------------
# A sessão é desligada por padrão no ApplicationController, mas nós queremos
# ligá-la para entrar/sair do sistema.
class LoginsController < ActionController::Base
  session :on
end
------------------------------------------

Ou até mesmo para actions específicas:

[source, ruby]
------------------------------------------
class ProductsController < ActionController::Base
  session :on, :only => [:create, :update]
end
------------------------------------------

=== Acessando a Sessão ===

Em seu controller, você pode acessar a sessão através do método de instância `session`.

NOTE: Existem dois métodos `session`, o método de classe e o método de instância. O método de classe descrito acima é utilizado para ligar e desligar a sessão, enquanto o método de instância é utilizado é utilizado para acessar os valores da sessão.

Valores são armazenados na sessão utilizando pares de chaves/valores como um hash:

[source, ruby]
------------------------------------------
class ApplicationController < ActionController::Base

private

  # Encontra o User com o ID armazenado na sessão com a chave :current_user_id
  # Esta é uma forma comum de lidar com login de usuários em uma aplicação Rails;
  # Durante o login o valor é armazenado, e no logout ele é removido.
  def current_user
    @_current_user ||= session[:current_user_id] && User.find(session[:current_user_id])
  end

end
------------------------------------------

Para armazenar algo na sessão, simplesmente atribua uma chave acomo um hash:

[source, ruby]
------------------------------------------
class LoginsController < ApplicationController

  # "Cria" um login, ou seja, "loga o usuário"
  def create
    if user = User.authenticate(params[:username, params[:password])
      # Registra o ID do usuário na sessão para que possa ser recuperado durante outras requisições
      session[:current_user_id] = user.id
      redirect_to root_url
    end
  end

end
------------------------------------------

Para remover algo da sessão, atribua o valor `nil` para a chave:

[source, ruby]
------------------------------------------
class LoginsController < ApplicationController

  # "Apaga" um login, ou seja, "desloga o usuário"
  def destroy
    # Remove o id do usuário da sessão
    session[:current_user_id] = nil
    redirect_to root_url
  end

end
------------------------------------------

Para reiniciar a sessão inteira, utilize `reset_session`.

=== O flash ===

O flash é uma parte especial da sessão que é limpa entre cada requisição. Isto significa que valores armazenados nele só ficarão disponíveis durante a próxima requisição, o que é útil para armazenar mensagens de erro, etc. Ele é acessado igual a sessão, como um hash. Vamos utilizar o ato de logout como exemplo. O controller pode enviar uma mensagem que será apresentada ao usuário na próxima requisição:

[source, ruby]
------------------------------------------
class LoginsController < ApplicationController

  def destroy
    session[:current_user_id] = nil
    flash[:notice] = "Você saiu do sistema"
    redirect_to root_url
  end

end
------------------------------------------

A action `destroy` redireciona a aplicação para `root_url`, onde a mensagem será apresentada. Repare que fica a cargo da próxima action o que fazer com o que a action anterior colocou no flash. É normal apresentar erros ou informações a partir do flash no layout da aplicação:

------------------------------------------
<html>
  <!-- <head/> -->
  <body>
    <% if flash[:notice] -%>
      <p class="notice"><%= flash[:notice] %></p>
    <% end -%>
    <% if flash[:error] -%>
      <p class="error"><%= flash[:error] %></p>
    <% end -%>
    <!-- more content -->
  </body>
</html>
------------------------------------------

Desta forma, se uma action atribuir uma mensagem de erro ou de informação no flash, o layout irá apresentá-la automaticamente.

Se você quiser que um valor no flash seja mantido para outra requisição, utilize o método `keep`:

[source, ruby]
------------------------------------------
class MainController < ApplicationController

  # Digamos que este método corresponda a root_url, mas você quer que todas as requisições aqui sejam redirecionadas para
  # UsersController#index. Se uma action atribuir um valor ao flash e redirecionar aqui, os valores normalmente serão perdidos
  # quando outro redirecionamento acontecer, mas você pode utilizar o método keep para persistí-lo por requisições.
  def index
    flash.keep # Irá persistir todos os valores em flash. Você também pode utilizar uma chave para manter somente um determinado valor: flash.keep(:notice)
    redirect_to users_url
  end

end
------------------------------------------

==== +flash.now+ ====

Por padrão, adicionar valores ao flash irá torná-los disponíveis durante a próxima requisição, mas algumas vezes você pode querer acessar estes valores nesta mesma requisição. Por exemplo, se a action `create` falha em salvar um recurso e você renderizar o template `new` diretamente, isto não irá resultar em uma nova requisição, mas você pode ainda querer mostrar uma mensagem utilizando o flash. Para fazê-lo, você pode utilizar `flash.now` da mesma forma que utiliza o `flash`:

[source, ruby]
------------------------------------------
class ClientsController < ApplicationController

  def create
    @client = Client.new(params[:client])
    if @client.save
      # ...
    else
      flash.now[:error] = "Não foi possível salvar o cliente"
      render :action => "new"
    end
  end

end
------------------------------------------
