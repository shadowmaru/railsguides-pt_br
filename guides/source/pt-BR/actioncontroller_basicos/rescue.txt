== Rescue (Resgatar) ==

Provavelmente sua aplicação irá conter bugs ou então poderá lançar exceções que precisarão ser tratadas. Por exemplo, se um usuário seguir um link que aponta para um recurso que não existe mais no banco de dados, o Active Record irá lançar uma exceção ActiveRecord::RecordNotFound. O tratamento padrão de exceções do Rails é mostrar uma mensagem  de erro no servidor (500 Server Error) para todas as exceções. Se a requisição foi feita localmente, um rastro da execução e algumas informações adicionais são mostradas para facilitar a sua depuração do erro. Se a requisição foi remota o Rails simplesmente irá mostrar uma mensagem "500 Server Error" para o usuário, ou então uma mensagem "404 Not Found" se houve um erro de roteamento ou um registro não pode ser encontrado. Algumas vezes você pode querer personalizar como estes erros são capturados e como eles serão mostrados ao usuário. Existem alguns níveis de tratamento de exceções disponíveis em um aplicação Rails:

=== Os Template Padrões de 500 e 404 ===

Por padrão uma aplicação em modo de produção irá renderizar uma mensagem de erro 404 ou 500. Estas mensagens estão contidas em arquivos HTML estáticos na pasta `public`, em `404.html` e `500.html` respectivamente. Você pode personalizar estes arquivos e adicionar alguma informação extra e um layout, mas lembre-se que eles são estáticos, ou seja, você não pode utilizar RHTML ou layout neles, somente HTML puro.

=== `rescue_from` ===

Se você quiser fazer algo mais elaborado na captura de erros, você pode utilizar o `rescue_from`, que lida com exceções de um certo tipo (ou vários tipos) em um controller inteiro e suas subclasses. Quando uma exceção ocorre e é capturada pela diretriz +rescue_from+, o objeto da exceção é passado à quem ficou responsável pela exceção. O responsável pode ser um método ou um objeto Proc passado com a opção `:with`. Você também pode utilizar um bloco diretamente ao invés de um objeto Proc.

Aqui está como você pode utilizar o +rescue_from+ para interceptar todos os erros do tipo ActiveRecord::RecordNotFound e fazer alguma coisa com eles.

[source, ruby]
-----------------------------------
class ApplicationController < ActionController::Base

  rescue_from ActiveRecord::RecordNotFound, :with => :record_not_found

private

  def record_not_found
    render :text => "404 Not Found", :status => 404
  end

end
-----------------------------------

Claro que este não é um exemplo complexo e não melhora em nada o tratamento padrão de exceções, mas assim que você capturar as exceções você estará livre para fazer o que quiser com elas. Por exemplo, você poderia criar uma classe de exceção personalizada que seria lançada quando o usuário não tivesse acesso a uma determinada seção de sua aplicação:

[source, ruby]
-----------------------------------
class ApplicationController < ActionController::Base

  rescue_from User::NotAuthorized, :with => :user_not_authorized

private

  def user_not_authorized
    flash[:error] = "Você não tem acesso a esta seção."
    redirect_to :back
  end

end

class ClientsController < ApplicationController

  # Verifica se o usuário tem autorização para verificar os clientes.
  before_filter :check_authorization

  # Perceba como as actions não tem que se preocupar com toda a parte de autenticação.
  def edit
    @client = Client.find(params[:id])
  end

private

  # Se o usuário não está autorizado, simplesmente lance uma exceção.
  def check_authorization
    raise User::NotAuthorized unless current_user.admin?
  end

end
-----------------------------------

NOTE: Algumas exceções só são resgatáveis a partir da classe ApplicationController, já que elas são lançadas antes de o controller ser inicializado e a action seja executada. Veja o link:http://m.onkey.org/2008/7/20/rescue-from-dispatching[artigo] de Pratik Naik sobre o assunto para obter mais informações.
