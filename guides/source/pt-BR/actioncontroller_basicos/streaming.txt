== Streaming e Download de Arquivos ==

Algumas vezes você pode querer enviar um arquivo para o usuário ao invés de renderizar uma página HTML. Todos os controllers no Rails possuem os métodos `send_data` e `send_file`, que podem ser utilizados para enviar dados para o cliente. `send_file` é um método conveniente que permite a você dizer o nome de um arquivo no disco, e ele se encarregará de enviar o conteúdo do arquivo para você.

Para enviar dados para o cliente, utilize `send_data`:

[source, ruby]
----------------------------
require "prawn"
class ClientsController < ApplicationController

  # Gera um documento PDF com informações do cliente e o retorna.
  # O usuário receberá o PDF como um arquivo para download.
  def download_pdf
    client = Client.find(params[:id])
    send_data(generate_pdf, :filename => "#{client.name}.pdf", :type => "application/pdf")
  end

private

  def generate_pdf(client)
    Prawn::Document.new do
      text client.name, :align => :center
      text "Address: #{client.address}"
      text "Email: #{client.email}"
    end.render
  end

end
----------------------------

A action `download_pdf` no exemplo acima invocará um método privado que gera o arquivo (um documento PDF) e retorna-o como uma string. Esta string será então enviada para o cliente como um arquivo para ser baixado e um nome para o arquivo será sugerido ao usuário. Algumas vezes quando enviado arquivos para o usuário, você pode não querer que ele baixe o arquivo. Imagens, por exemplo, que podem ser inseridas em páginas HTML. Para dizer ao navegador que um arquivo não é para ser baixado, você pode atribuir à opção `:disposition` o valor "inline". O oposto e disto e que é o valor padrão para esta opção é "attachment".

=== Enviando Arquivos ===

Se você quiser enviar um arquivo já existente no disco, utilize o método `send_file`. Isto não é recomendado, mas pode ser útil caso você queira fazer alguma autenticação antes de permitir que o usuário baixe o arquivo.

[source, ruby]
----------------------------
class ClientsController < ApplicationController

  # Envia um arquivo já existente em disco
  def download_pdf
    client = Client.find(params[:id])
    send_data("#{RAILS_ROOT}/files/clients/#{client.id}.pdf", :filename => "#{client.name}.pdf", :type => "application/pdf")
  end

end
----------------------------

Isto irá ler e enviar o arquivo 4Kb por vez, evitando carregar o arquivo inteiro na memória de uma só vez. Você pode desligar o streaming com a opção `:stream` ou ajustas o tamanho dos blocos com a opção `:buffer_size`.

WARNING: Tome cuidado quando utilizar (ou simplesmente não utilize) dados "de fora" (parâmetros, cookies, etc) para localizar um arquivo em disco, já que isto é um risco de segurança que pode permitir a alguém obter acesso a arquivos que não deveria.

TIP: Não é recomendado fazer stream de arquivos estáticos através do Rails se você pode simplesmente mantê-los em uma pasta pública no seu servidor web. É muito mais eficiente deixar o usuário baixar o arquivo utilizando diretamente o Apache ou outro servidor web, não precisando fazer com que a requisição passe por toda a pilha de controle do Rails.

=== Downloads RESTful ===

Apesar de o método `send_data` funcionar bem, se você estiver criando uma aplicação RESTful, ter actions separadas para baixar arquivos geralmente não é necessário. Na terminologia REST, o arquivo PDF do exemplo acima pode ser considerado simplesmente outra representação de um recurso para o cliente. O Rails provê uma forma fácil de permitir "downloads RESTful". Aqui está como você pode reescrever o exemplo para que o download do PDF seja parte da action `show`, sem qualquer streaming:

[source, ruby]
----------------------------
class ClientsController < ApplicationController

  # O usuário pode solicitar este recurso como um HTML ou PDF.
  def show
    @client = Client.find(params[:id])

    respond_to do |format|
      format.html
      format.pdf{ render :pdf => generate_pdf(@client) }
    end
  end

end
----------------------------

Para este exemplo funcionar, você deve adicionar o MIME type PDF ao Rails. Isto pode ser feito adicionar a seguinte linha ao arquivo `config/initializers/mime_types.rb`:

[source, ruby]
----------------------------
Mime::Type.register "application/pdf", :pdf
----------------------------

NOTE: Arquivos de configuração não são recarregados a cada requisição, então você deverá reiniciar o servidor para que as alterações sejam efetivadas.

Agora o usuário pode requisitar uma versão PDF de um cliente simplesmente adicionando ".pdf" a URL:

----------------------------
GET /clients/1.pdf
----------------------------
